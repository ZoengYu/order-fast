// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: food.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const addMenuFood = `-- name: AddMenuFood :one
INSERT INTO menu_food (
	menu_id,
	food_name,
	custom_option
) VALUES (
	$1, $2, $3
) RETURNING id, menu_id, food_name, custom_option
`

type AddMenuFoodParams struct {
	MenuID       int64    `json:"menu_id"`
	FoodName     string   `json:"food_name"`
	CustomOption []string `json:"custom_option"`
}

func (q *Queries) AddMenuFood(ctx context.Context, arg AddMenuFoodParams) (MenuFood, error) {
	row := q.db.QueryRowContext(ctx, addMenuFood, arg.MenuID, arg.FoodName, pq.Array(arg.CustomOption))
	var i MenuFood
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.FoodName,
		pq.Array(&i.CustomOption),
	)
	return i, err
}

const getMenuFood = `-- name: GetMenuFood :one
SELECT id, menu_id, food_name, custom_option FROM menu_food
WHERE menu_id = $1 AND food_name = $2
`

type GetMenuFoodParams struct {
	MenuID   int64  `json:"menu_id"`
	FoodName string `json:"food_name"`
}

func (q *Queries) GetMenuFood(ctx context.Context, arg GetMenuFoodParams) (MenuFood, error) {
	row := q.db.QueryRowContext(ctx, getMenuFood, arg.MenuID, arg.FoodName)
	var i MenuFood
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.FoodName,
		pq.Array(&i.CustomOption),
	)
	return i, err
}
