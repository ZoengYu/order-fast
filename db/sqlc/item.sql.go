// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: item.sql

package db

import (
	"context"
)

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO item (
	menu_id,
	name,
	price
) VALUES (
	$1, $2, $3
) RETURNING id, menu_id, name, price
`

type CreateMenuItemParams struct {
	MenuID int64  `json:"menu_id"`
	Name   string `json:"name"`
	Price  int32  `json:"price"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createMenuItem, arg.MenuID, arg.Name, arg.Price)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.Name,
		&i.Price,
	)
	return i, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
DELETE FROM item
WHERE id = $1 AND menu_id = $2
`

type DeleteMenuItemParams struct {
	ID     int64 `json:"id"`
	MenuID int64 `json:"menu_id"`
}

func (q *Queries) DeleteMenuItem(ctx context.Context, arg DeleteMenuItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItem, arg.ID, arg.MenuID)
	return err
}

const deleteMenuItemAll = `-- name: DeleteMenuItemAll :exec
DELETE FROM item
WHERE menu_id = $1
`

func (q *Queries) DeleteMenuItemAll(ctx context.Context, menuID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItemAll, menuID)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, menu_id, name, price FROM item
WHERE id = $1
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.Name,
		&i.Price,
	)
	return i, err
}

const listAllMenuItem = `-- name: ListAllMenuItem :many
SELECT id, menu_id, name, price FROM item
WHERE menu_id = $1
`

func (q *Queries) ListAllMenuItem(ctx context.Context, menuID int64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listAllMenuItem, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.Name,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMenuItem = `-- name: ListMenuItem :many
SELECT id, menu_id, name, price FROM item
WHERE menu_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListMenuItemParams struct {
	MenuID int64 `json:"menu_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMenuItem(ctx context.Context, arg ListMenuItemParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listMenuItem, arg.MenuID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.Name,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
