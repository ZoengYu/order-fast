// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: accounts.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    owner
) VALUES (
    $1
) RETURNING id, owner, created_at
`

func (q *Queries) CreateAccount(ctx context.Context, owner string) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, owner)
	var i Account
	err := row.Scan(&i.ID, &i.Owner, &i.CreatedAt)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Owner, &i.CreatedAt)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET owner = $2
WHERE id = $1
RETURNING id, owner, created_at
`

type UpdateAccountParams struct {
	ID    int64  `json:"id"`
	Owner string `json:"owner"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Owner)
	var i Account
	err := row.Scan(&i.ID, &i.Owner, &i.CreatedAt)
	return i, err
}
