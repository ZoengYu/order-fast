// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: tables.sql

package db

import (
	"context"
)

const createTable = `-- name: CreateTable :one
INSERT INTO tables (
    store_id,
    table_id,
    table_name
) VALUES (
    $1, $2, $3
) RETURNING id, store_id, table_id, table_name, created_at
`

type CreateTableParams struct {
	StoreID   int64  `json:"store_id"`
	TableID   int64  `json:"table_id"`
	TableName string `json:"table_name"`
}

func (q *Queries) CreateTable(ctx context.Context, arg CreateTableParams) (Table, error) {
	row := q.db.QueryRowContext(ctx, createTable, arg.StoreID, arg.TableID, arg.TableName)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.TableID,
		&i.TableName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTable = `-- name: DeleteTable :exec
DELETE FROM tables
WHERE id = $1
`

func (q *Queries) DeleteTable(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTable, id)
	return err
}

const deleteTableByName = `-- name: DeleteTableByName :exec
DELETE FROM tables
WHERE store_id = $1 AND table_name = $2
`

type DeleteTableByNameParams struct {
	StoreID   int64  `json:"store_id"`
	TableName string `json:"table_name"`
}

func (q *Queries) DeleteTableByName(ctx context.Context, arg DeleteTableByNameParams) error {
	_, err := q.db.ExecContext(ctx, deleteTableByName, arg.StoreID, arg.TableName)
	return err
}

const getTable = `-- name: GetTable :one
SELECT id, store_id, table_id, table_name, created_at FROM tables
WHERE store_id = $1 and table_id = $2
`

type GetTableParams struct {
	StoreID int64 `json:"store_id"`
	TableID int64 `json:"table_id"`
}

func (q *Queries) GetTable(ctx context.Context, arg GetTableParams) (Table, error) {
	row := q.db.QueryRowContext(ctx, getTable, arg.StoreID, arg.TableID)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.TableID,
		&i.TableName,
		&i.CreatedAt,
	)
	return i, err
}

const listTables = `-- name: ListTables :many
SELECT id, store_id, table_id, table_name, created_at FROM tables
WHERE store_id = $1
ORDER BY table_id
`

func (q *Queries) ListTables(ctx context.Context, storeID int64) ([]Table, error) {
	rows, err := q.db.QueryContext(ctx, listTables, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Table{}
	for rows.Next() {
		var i Table
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.TableID,
			&i.TableName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTable = `-- name: UpdateTable :exec
UPDATE tables SET table_name = $3
where store_id = $1 AND table_id = $2
`

type UpdateTableParams struct {
	StoreID   int64  `json:"store_id"`
	TableID   int64  `json:"table_id"`
	TableName string `json:"table_name"`
}

func (q *Queries) UpdateTable(ctx context.Context, arg UpdateTableParams) error {
	_, err := q.db.ExecContext(ctx, updateTable, arg.StoreID, arg.TableID, arg.TableName)
	return err
}
