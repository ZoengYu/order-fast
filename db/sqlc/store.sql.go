// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: store.sql

package db

import (
	"context"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (
    store_name,
    store_address,
    store_phone,
    store_owner,
    store_manager
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, store_name, store_address, store_phone, store_owner, store_manager, created_at
`

type CreateStoreParams struct {
	StoreName    string `json:"store_name"`
	StoreAddress string `json:"store_address"`
	StorePhone   string `json:"store_phone"`
	StoreOwner   string `json:"store_owner"`
	StoreManager string `json:"store_manager"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore,
		arg.StoreName,
		arg.StoreAddress,
		arg.StorePhone,
		arg.StoreOwner,
		arg.StoreManager,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.StoreName,
		&i.StoreAddress,
		&i.StorePhone,
		&i.StoreOwner,
		&i.StoreManager,
		&i.CreatedAt,
	)
	return i, err
}

const getStore = `-- name: GetStore :one
SELECT id, store_name, store_address, store_phone, store_owner, store_manager, created_at FROM stores
WHERE store_name = $1 LIMIT 1
`

func (q *Queries) GetStore(ctx context.Context, storeName string) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStore, storeName)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.StoreName,
		&i.StoreAddress,
		&i.StorePhone,
		&i.StoreOwner,
		&i.StoreManager,
		&i.CreatedAt,
	)
	return i, err
}

const updateStore = `-- name: UpdateStore :one
UPDATE stores
SET store_name = $2, store_address = $3, store_phone = $4, store_owner = $5, store_manager = $6
WHERE store_name = $1
RETURNING id, store_name, store_address, store_phone, store_owner, store_manager, created_at
`

type UpdateStoreParams struct {
	StoreName    string `json:"store_name"`
	StoreName_2  string `json:"store_name_2"`
	StoreAddress string `json:"store_address"`
	StorePhone   string `json:"store_phone"`
	StoreOwner   string `json:"store_owner"`
	StoreManager string `json:"store_manager"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, updateStore,
		arg.StoreName,
		arg.StoreName_2,
		arg.StoreAddress,
		arg.StorePhone,
		arg.StoreOwner,
		arg.StoreManager,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.StoreName,
		&i.StoreAddress,
		&i.StorePhone,
		&i.StoreOwner,
		&i.StoreManager,
		&i.CreatedAt,
	)
	return i, err
}
