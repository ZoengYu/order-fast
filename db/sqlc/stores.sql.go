// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: stores.sql

package db

import (
	"context"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (
    owner,
    name,
    address,
    phone,
    manager
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, owner, name, address, phone, manager, created_at
`

type CreateStoreParams struct {
	Owner   string `json:"owner"`
	Name    string `json:"name"`
	Address string `json:"address"`
	Phone   string `json:"phone"`
	Manager string `json:"manager"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore,
		arg.Owner,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Manager,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Manager,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores
WHERE id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const getStore = `-- name: GetStore :one
SELECT id, owner, name, address, phone, manager, created_at FROM stores
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStore(ctx context.Context, id int64) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Manager,
		&i.CreatedAt,
	)
	return i, err
}

const listStoresByName = `-- name: ListStoresByName :many
SELECT id, owner, name, address, phone, manager, created_at FROM stores
WHERE name ~* $1
LIMIT $2
OFFSET $3
`

type ListStoresByNameParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListStoresByName(ctx context.Context, arg ListStoresByNameParams) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, listStoresByName, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Store{}
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Manager,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :one
UPDATE stores
SET owner = $2, name = $3, address = $4, phone = $5, manager = $6
WHERE id = $1
RETURNING id, owner, name, address, phone, manager, created_at
`

type UpdateStoreParams struct {
	ID      int64  `json:"id"`
	Owner   string `json:"owner"`
	Name    string `json:"name"`
	Address string `json:"address"`
	Phone   string `json:"phone"`
	Manager string `json:"manager"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, updateStore,
		arg.ID,
		arg.Owner,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Manager,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Manager,
		&i.CreatedAt,
	)
	return i, err
}
